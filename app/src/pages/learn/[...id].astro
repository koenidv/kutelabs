---
import { getCollection } from "astro:content"
import { Tabs } from "astro-tabs"
import type { Challenge } from "../../schema/challenge"
import InnerLayout from "../../layouts/InnerLayout.astro"
import ElevatedBox from "../../components/ElevatedBox.astro"
import EditorMixed from "../../components/EditorMixedWrapper.astro"
import MixedEditorControls from "../../components/MixedEditorControls.astro"
import { Icon } from "astro-icon/components"

export async function getStaticPaths() {
  return (await getCollection("challenges"))
    .filter(it => !it.id.endsWith("section"))
    .map(it => ({
      params: { id: it.id },
      props: { challenge: it.data },
    }))
}

const challenge = Astro.props.challenge as Challenge
---

<InnerLayout
  title={`${challenge.story.title}`}
  navigateBackText="Back to Lessons"
  navigateBackDefaultUrl="/learn">
  <div
    id="kutelabs"
    class="flex w-full flex-col justify-center"
    data-tests={JSON.stringify(challenge.tests)}>
    <div class="flex flex-col lg:flex-row px-12 pb-12 lg:h-[90vh] gap-4">
      <div class="border-4 border-beige-200 bg-beige-50 p-4 w-full lg:w-[40%] min-w-72 flex-grow">
        <Tabs class="h-full">
          <Fragment class="w-full" slot="tab-1">Story</Fragment>
          <Fragment class="w-full" slot="tab-2">Logs</Fragment>

          <Fragment slot="panel-1" class="h-full">
            <div class="flex flex-col h-full gap-4 justify-between">
              <div class="flex flex-col gap-4">
                <h2 class="font-poppins text-xl">{challenge.story.title}</h2>
                <p class="font-medium" set:html={challenge.story.dialog?.static} />
              </div>

              <div class="flex flex-col gap-4">
                <hr />
                {
                  challenge.tests?.map(it =>
                    Object.entries(it.run).map(([id, test]) => (
                      <div class="flex flex-row gap-2 kt-test items-center" id={`test-${id}`}>
                        <Icon class="passed-only" name="humbleicons:check-circle" size="20" />
                        <Icon class="failed-only" name="humbleicons:times-circle" size="20" />
                        <Icon class="pending-only" name="svg-spinners:ring-resize" size="20" />
                        <div class="flex flex-col gap-1">
                          <p class="font-medium">{test.description}</p>
                          <p id="test-error" class="font-normal" />
                        </div>
                      </div>
                    ))
                  )
                }
              </div>
            </div>
          </Fragment>

          <Fragment slot="panel-2">
            <h2>If your code prints anything or throws an error, it will show up here.</h2>
            <div class="flex flex-col pt-4 kt-logs"></div>
          </Fragment>
        </Tabs>
      </div>

      <MixedEditorControls executeLanguage={challenge.environment.language} />

      <ElevatedBox elevation={2} class="w-full flex-grow-[2] max-lg:h-[80vh]">
        <EditorMixed data={challenge.editor} />
      </ElevatedBox>
    </div>
  </div>
</InnerLayout>
