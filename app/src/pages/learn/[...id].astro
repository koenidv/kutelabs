---
import { getCollection } from "astro:content"
import type { Challenge } from "../../schema/challenge"
import InnerLayout from "../../layouts/InnerLayout.astro"
import ElevatedBox from "../../components/ElevatedBox.astro"
import EditorMixed from "../../components/EditorMixedWrapper.astro"

export async function getStaticPaths() {
  return (await getCollection("challenges"))
    .filter(it => !it.id.endsWith("section"))
    .map(it => ({
      params: { id: it.id },
      props: { challenge: it.data },
    }))
}

const challenge = Astro.props.challenge as Challenge
---

<InnerLayout
  title={`${challenge.story.title}`}
  navigateBackText="Back to Lessons"
  navigateBackDefaultUrl="/learn">
  <div
    id="kutelabs"
    class="flex w-full flex-col justify-center"
    data-tests={JSON.stringify(challenge.tests)}>
    <div class="flex flex-col lg:flex-row px-12 pb-12 lg:h-[90vh] gap-8">
      <div
        class="border-4 border-beige-200 bg-beige-50 px-4 py-6 w-full lg:w-[40%] min-w-72 flex-grow-[1] flex flex-col gap-4">
        <h2 class="font-poppins text-xl">{challenge.story.title}</h2>
        <p class="font-medium" set:html={challenge.story.dialog?.static} />
        <hr />
        {
          challenge.tests.map(it =>
            Object.entries(it.run).map(([id, test]) => (
              <div class="flex flex-col gap-2 kt-test" id={`test-${id}`}>
                <p class="font-medium">{test.description}</p>
              </div>
            ))
          )
        }

        <hr />
        <a href="#" id="btn-tojs">Print JS</a>
        <a href="#" id="btn-tokt">Print KT</a>
        <hr />
        <a href="#" id="btn-execjs">Execute JS</a>
      </div>

      <ElevatedBox elevation={2} class="w-full flex-grow-[2] max-lg:h-[80vh]">
        <EditorMixed data={challenge.editor} />
      </ElevatedBox>
    </div>
  </div>
</InnerLayout>

<script>
  import { SandboxTestRunner, type TestSuite } from "@kutelabs/client-runner"
  import { JsCompiler } from "@kutelabs/editor-mixed/src/compile/JsCompiler"
  import { KtCompiler } from "@kutelabs/editor-mixed/src/compile/KtCompiler"
  import type { EditorMixed } from "@kutelabs/editor-mixed/src/editor"
  import { filterCallbacks } from "../../execution/EnvironmentContext"
  import type { Challenge } from "../../schema/challenge"
  import { TestResult } from "@kutelabs/client-runner/src/TestRunner"

  const deserializeTests = (): TestSuite => {
    const parsed = JSON.parse(
      document.querySelector("[data-tests]")!.getAttribute("data-tests")!
    ) as Challenge["tests"]
    parsed.forEach(tests => {
      Object.entries(tests.run).forEach(([_id, test]) => {
        test.function = eval(test.function)
      })
    })
    return parsed as unknown as TestSuite
  }

  const countTests = (tests: TestSuite): number => {
    return tests.reduce((acc, suite) => acc + suite.args.length, 0)
  }

  document.querySelector("#btn-tojs")!.addEventListener(
    "click",
    (() => {
      const editor = document.querySelector("editor-mixed") as EditorMixed
      const callbacks = filterCallbacks([], editor.getExecutionCallbacks())
      console.log(editor.compile(JsCompiler, callbacks).code)
    }).bind(this)
  )

  document.querySelector("#btn-execjs")!.addEventListener(
    "click",
    (() => {
      const editor = document.querySelector("editor-mixed") as EditorMixed
      const tests = deserializeTests()

      const callbacks = filterCallbacks(["setUsername"], {
        setUsername: (username: string) => {
          console.log("Username will be set to '", username, "' once implemented")
        },
        ...editor.getExecutionCallbacks(),
      })
      const compiled = editor.compile(JsCompiler, callbacks)
      const sandboxRunner = new SandboxTestRunner(tests, (id, result, message) => {
        const display = document.querySelector(`#test-${id}`) as HTMLElement
        console.log("element:", display)
        display.classList.remove("passed", "failed")
        display.classList.add(result == TestResult.Passed ? "passed" : "failed")
      })
      sandboxRunner
        .execute(compiled.code, {
          argNames: compiled.argNames,
          entrypoint: compiled.entrypoint,
          callbacks: callbacks,
          timeout: compiled.totalDelay * countTests(tests) + 5000,
        })
        .then(_result => {
          editor.onExecutionFinished()
        })
    }).bind(this)
  )

  document.querySelector("#btn-tokt")!.addEventListener(
    "click",
    (() => {
      const editor = document.querySelector("editor-mixed") as EditorMixed
      const callbacks = filterCallbacks([], editor.getExecutionCallbacks())
      console.log(editor.compile(KtCompiler, callbacks).code)
    }).bind(this)
  )
</script>
